const parse_path = (path, x = 0, y = 0) => {
    let at = 0;
    path = path.replaceAll(/[A-Za-z]/g, str => ' ' + str + ' ').replaceAll(",", " ").replaceAll("-", " -");
    path = path.slice(1, path.length - 1).split(' ').filter(x => x);
    path = path.map(x => {
        x = x.split(",");
        if (x.length <= 1) return x;
        let first = x.shift();
        x[0] += first;
        return x;
    }).flat();
    let ret_str = 'ctx.begin_path();\n';
    let curr_op = 'm';
    const bx = x, by = y;
    const op_parse = _ => {
        switch(curr_op)
        {
            case 'M':
                x = parseFloat(path[at++]) + bx;
                y = parseFloat(path[at++]) + by;
                ret_str += `ctx.move_to(${x.toFixed(2)}, ${y.toFixed(2)});\n`;
                break;
            case 'L':
            {
                const prev_x = x;
                const prev_y = y;
                x = parseFloat(path[at++]) + bx;
                y = parseFloat(path[at++]) + by;
                if (Math.abs(x - prev_x) > 0.001 || Math.abs(y - prev_y) > 0.001)
                    ret_str += `ctx.line_to(${x.toFixed(2)}, ${y.toFixed(2)});\n`;
                break;
            }
            case 'H':
            {
                const prev_x = x;
                x = parseFloat(path[at++]) + bx;
                if (Math.abs(x - prev_x) > 0.001)
                    ret_str += `ctx.line_to(${x.toFixed(2)}, ${y.toFixed(2)});\n`;
                break;
            }
            case 'V':
            {
                const prev_y = y;
                y = parseFloat(path[at++]) + by;
                if (Math.abs(y - prev_y) > 0.001)
                    ret_str += `ctx.line_to(${x.toFixed(2)}, ${y.toFixed(2)});\n`;
                break;
            }
            case 'Q':
            {
                const x1 = parseFloat(path[at++]) + bx;
                const y1 = parseFloat(path[at++]) + by;
                x = parseFloat(path[at++]) + bx;
                y = parseFloat(path[at++]) + by;
                ret_str += `ctx.qcurve_to(${x1.toFixed(2)}, ${y1.toFixed(2)}, ${x.toFixed(2)}, ${y.toFixed(2)});\n`;
                break;
            }
            case 'C':
            {
                const x1 = parseFloat(path[at++]) + bx;
                const y1 = parseFloat(path[at++]) + by;
                const x2 = parseFloat(path[at++]) + bx;
                const y2 = parseFloat(path[at++]) + by;
                x = parseFloat(path[at++]) + bx;
                y = parseFloat(path[at++]) + by;
                ret_str += `ctx.bcurve_to(${x1.toFixed(2)}, ${y1.toFixed(2)}, ${x2.toFixed(2)}, ${y2.toFixed(2)}, ${x.toFixed(2)}, ${y.toFixed(2)});\n`;
                break;
            }
            case 'm':
                x += parseFloat(path[at++]);
                y += parseFloat(path[at++]);
                ret_str += `ctx.move_to(${x.toFixed(2)}, ${y.toFixed(2)});\n`;
                break;
            case 'l':
            {
                const prev_x = x;
                const prev_y = y;
                x += parseFloat(path[at++]);
                y += parseFloat(path[at++]);
                if (Math.abs(x - prev_x) > 0.001 || Math.abs(y - prev_y) > 0.001)
                    ret_str += `ctx.line_to(${x.toFixed(2)}, ${y.toFixed(2)});\n`;
                break;
            }
            case 'h':
            {
                const prev_x = x;
                x += parseFloat(path[at++]);
                if (Math.abs(x - prev_x) > 0.001)
                    ret_str += `ctx.line_to(${x.toFixed(2)}, ${y.toFixed(2)});\n`;
                break;
            }
            case 'v':
            {
                const prev_y = y;
                y += parseFloat(path[at++]);
                if (Math.abs(y - prev_y) > 0.001)
                    ret_str += `ctx.line_to(${x.toFixed(2)}, ${y.toFixed(2)});\n`;
                break;
            }
            case 'q':
            {
                const x1 = x + parseFloat(path[at++]);
                const y1 = y + parseFloat(path[at++]);
                x += parseFloat(path[at++]);
                y += parseFloat(path[at++]);
                ret_str += `ctx.qcurve_to(${x1.toFixed(2)}, ${y1.toFixed(2)}, ${x.toFixed(2)}, ${y.toFixed(2)});\n`;
                break;
            }
            case 'c':
            {
                const x1 = x + parseFloat(path[at++]);
                const y1 = y + parseFloat(path[at++]);
                const x2 = x + parseFloat(path[at++]);
                const y2 = y + parseFloat(path[at++]);
                x += parseFloat(path[at++]);
                y += parseFloat(path[at++]);
                ret_str += `ctx.bcurve_to(${x1.toFixed(2)}, ${y1.toFixed(2)}, ${x2.toFixed(2)}, ${y2.toFixed(2)}, ${x.toFixed(2)}, ${y.toFixed(2)});\n`;
                break;
            }
            case 'z':
                console.log("uh");
                break;
            default:
                throw new Error('uh oh: ' + path[at] + ' ' + path.slice(at - 10, at + 10));
        }
    }
    while (at < path.length)
    {
        if (!Number.isFinite(parseFloat(path[at])))    
            curr_op = path[at++];
        console.log(at, path.length);
        op_parse();
    }
    return ret_str;
}

const parse_svg = str => {
    let doc = new DOMParser().parseFromString(str, 'text/xml');
    const [offset_x, offset_y] = doc.getElementsByTagName('svg')[0].attributes.viewBox.value.split(' ').map(x => parseFloat(x)).slice(2);
    doc = [...doc.getElementsByTagName('path')].map(x => x.attributes).filter(x => !x["clip-rule"] && (!x["fill-opacity"] || parseFloat(x["fill-opacity"].nodeValue) !== 0));
    let ret = "";
    for (let x of doc)
    {
        if (x["fill"])
        {
            if (x["fill-opacity"])
                ret += `rr_renderer_set_fill(renderer, 0x${((x["fill-opacity"].nodeValue * 255) | 0).toString(16).padStart(2, '0')}${x["fill"].nodeValue.slice(1)});\n`;
            else
                ret += `rr_renderer_set_fill(renderer, 0xff${x["fill"].nodeValue.slice(1)});\n`;
        }
        ret += parse_path(x["d"].nodeValue, -offset_x / 2, -offset_y / 2);
        if (x["fill"])
            ret += `rr_renderer_fill(renderer);\n`;
    }
    console.log(ret);
}

console.log(parse_path(`M-230.344-169.53C-242.745-194.664-239.902-216.6-202.312-232.03L-202.313-232.033C-175.353-220.29-147.493-206.553-119.563-190.597-103.625-197.353-87.575-203.789-71.375-209.127L-71.155-210.065C-70.643-209.952-70.137-209.835-69.625-209.722-51.16-215.71-32.511-220.24-13.625-222.19L-11.688-203.597C-18.648-202.878-25.654-201.753-32.688-200.283-18.864-196.278-5.646-191.875 6.97-187.128 28.046-191.874 49.12-195.404 70.156-197.908L72.376-179.346C60.849-177.972 49.326-176.282 37.813-174.252 47.446-169.819 56.683-165.195 65.501-160.315 85.485-164.463 105.901-167.222 126.907-167.939L127.531-149.282C114.769-148.847 102.185-147.589 89.721-145.689 100.484-138.624 110.539-131.189 119.877-123.439 139.028-126.336 158.551-128.176 178.564-128.471L178.847-109.781C165.099-109.581 151.54-108.609 138.127-107.031 146.65-98.704 154.45-90.066 161.532-81.156 176.572-82.665 191.638-83.484 206.722-83.5L206.722-64.8119C195.941-64.7999 185.152-64.3579 174.347-63.5299 178.703-56.9969 182.725-50.3599 186.379-43.5929 188.324-39.9889 190.164-36.3469 191.909-32.6849 200.118-32.1209 208.331-31.3529 216.533-30.4049L214.408-11.8429C209.66-12.3909 204.903-12.8629 200.158-13.2789 204.99-.3489 208.65 12.8691 211.19 26.2511 220.152 28.9381 229.14 32.0041 238.19 35.5311L231.378 52.9371C225.61 50.6901 219.89 48.6021 214.188 46.7201 215.565 59.9701 215.871 73.3401 215.158 86.7501 222.288 90.4521 229.374 94.6561 236.346 99.5301L225.658 114.843C221.586 111.9951 217.474 109.3961 213.314 106.9991 211.782 118.8451 209.486 130.6971 206.408 142.4691 215.97 151.6761 224.079 162.3821 230.032 174.4061L213.282 182.6861C209.819 175.6931 205.377 169.1491 200.189 163.1561 196.273 174.6841 191.599 186.1081 186.251 197.3741 188.925 207.61 191.057 217.8501 192.627 228.0941L174.157 230.9061C172.83 222.2461 171.08 213.5761 168.907 204.9061 160.538 204.6521 152.233 204.1971 144.001 203.5621 143.815 210.7491 143.825 218.0021 144.001 225.3121L125.315 225.7501C125.121 217.7621 125.122 209.7721 125.345 201.8121 115.611 200.7061 106.015 199.3061 96.531 197.6561 95.943 204.187 95.4641 210.756 95.156 217.3441L76.5 216.4701C76.851 208.9571 77.398 201.507 78.094 194.0951 66.817 191.6671 55.752 188.8151 44.937 185.5951 43.987 190.8181 43.04 196.0481 42.062 201.2811L23.687 197.8441C24.804 191.864 25.882 185.8501 26.97 179.8441 15.323 175.7941 3.987 171.2281-6.97 166.2201-8.505 174.2951-10.014 182.3851-11.5 190.4701L-29.875 187.0951C-28.075 177.2991-26.255 167.494-24.375 157.6891-36.049 151.5761-47.245 144.9011-57.905 137.6261-59.442 146.0911-60.93 154.5741-62.375 163.0641L-80.812 159.9391C-78.85 148.41-76.799 136.894-74.656 125.377-84.825 117.397-94.384 108.817-103.312 99.657-105.778 111.963-108.177 124.275-110.562 136.595L-128.905 133.031C-125.635 116.136-122.295 99.236-118.845 82.314-126.575 72.918-133.705 63.016-140.125 52.594-141.788 62.812-143.388 73.058-145 83.312L-163.47 80.406C-160.611 62.224-157.699 43.995-154.563 25.78-162.839 8.075-169.328-10.852-173.781-30.97-176.865-18.726-179.797-6.39-182.687 6L-200.876 1.751C-194.654-24.931-188.197-51.675-180.281-77.999-180.335-78.885-180.391-79.765-180.438-80.655L-179.468-80.719C-172.473-103.661-164.33-126.26-154.188-148.187-179.156-157.995-204.571-165.144-230.344-169.53M-25.907-178.72C-39.402-182.96-53.584-186.83-68.437-190.28L-68.437-190.281C-78.683-186.806-89.005-182.858-99.375-178.656-90.896-173.48-82.425-168.102-74-162.5-57.97-168.722-41.93-174.11-25.907-178.72M5.6402-167.6563C5.6351-167.6554 5.6299-167.6545 5.625-167.656L5.626-167.655C-14.669-162.879-34.939-156.892-55.219-149.562-46.906-143.663-38.641-137.559-30.469-131.219-8.045-139.546 14.635-147.366 37.845-153.656 27.651-158.601 16.922-163.269 5.655-167.656 5.6509-167.6581 5.6457-167.6572 5.6402-167.6563M-136.9367-140.9354C-146.6584-119.9809-154.5692-98.1714-161.406-75.812-159.698-51.757-155.236-29.33-148.313-8.53-140.321-49.57-130.308-90.458-115.688-130.75-122.7216-134.3658-129.8172-137.7606-136.9367-140.9354M95.187-119.125C85.1166-126.6216 74.2583-133.7991 62.5641-140.5608 36.9384-134.7808 11.7417-126.6229-13.405-117.529-5.489-110.981 2.328-104.215 10.031-97.219 37.953-105.527 66.192-113.362 95.187-119.125M-71.437-104.72C-80.5587-110.7748-89.7645-116.4627-99.0612-121.7495-115.9731-74.4377-126.555-25.8398-135.187 23.375-129.036 35.761-121.89 47.427-113.874 58.437-102.364 4.188-89.132-50.22-71.437-104.72M139.439-78.469C131.884-87.131 123.526-95.53 114.376-103.594L114.375-103.592C84.472-98.532 55.165-90.83 25.875-82.312 33.853-74.562 41.695-66.585 49.345-58.312 79.284-67.117 109.314-74.116 139.439-78.469M-22.374-67.75C-33.21-76.946-44.202-85.582-55.344-93.624-73.4982-36.7893-86.9331 20.1603-98.75 77.28-90.133 87-80.74 96.09-70.654 104.563-59.151 46.567-44.454-11.128-22.374-67.75M169.938-34.686C165.023-43.793 159.397-52.711 153.063-61.406L153.062-61.406C123.194-57.756 93.219-51.304 63.156-42.844 67.646-37.643 72.066-32.336 76.406-26.936 101.979-31.436 127.558-33.668 153.094-33.876 158.888-33.922 164.68-33.843 170.47-33.686 170.291-34.022 170.118-34.354 169.938-34.686M21.065-26.874C11.705-36.567 2.233-45.822-7.405-54.594L-7.405-54.593C-28.729 1.597-42.895 59.157-54.125 117.439-43.568 125.074-32.392 132.128-20.625 138.531-9.685 83.544 3.165 28.396 21.065-26.874M179.5-14.688C171.49-15.062 163.47-15.245 155.47-15.22L155.4691-15.22C133.426-15.146 111.416-13.488 89.406-10.126 94.856-2.814 100.19 4.651 105.344 12.311 107.422 12.265 109.498 12.229 111.562 12.219 138.668 12.054 164.85 14.76 191 20.844 188.19 8.786 184.367-3.078 179.5-14.688M66.344 24.97C56.343 12.323 46.118 .275 35.72-11.22L35.719-11.218C19.219 41.492 7.124 94.33-3.313 147.312 7.516 152.424 18.762 157.026 30.374 161.156 38.679 115.57 47.859 69.583 66.344 24.97M194.75 41C169.208 34.317 143.836 31.171 117.312 30.937L117.314 30.938C123.398 40.801 129.234 50.921 134.781 61.344 155.369 65.369 176.274 70.114 196.844 78.344 197.133 65.8 196.457 53.324 194.75 41M101.438 73.031C94.284 62.463 86.998 52.208 79.594 42.281L79.593 42.282C64.326 82.451 56.089 124.45 48.313 167.065 58.693 170.207 69.321 172.957 80.188 175.345 84.738 140.417 92.555 106.485 101.438 73.031M195.594 98.095C179.43 91.042 162.709 86.42 145.564 82.657L145.562 82.658C150.266 92.504 154.684 102.61 158.874 112.938 169.937 117.042 180.614 122.518 190.374 129.315 192.762 118.913 194.511 108.493 195.594 98.095M136.281 128.751C129.4332 116.8773 122.4144 105.3416 115.2816 94.1279 108.2178 122.1763 102.2299 150.3517 98.565 178.971 107.685 180.581 116.957 181.941 126.345 183.031 127.829 164.701 130.876 146.549 136.281 128.751M185.126 148.814C179.874 144.688 174.22 141.022 168.314 137.814 171.8513 147.9019 175.1362 158.2234 178.156 168.751 180.733 162.131 183.074 155.484 185.126 148.814M154.564 161.906C152.919 158.793 151.258 155.7 149.594 152.626 147.3858 163.1774 145.89 173.9247 145 184.844 151.116 185.32 157.264 185.71 163.47 185.97 160.88 177.956 157.912 169.93 154.564 161.906`))
